name: Release Gem

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Select the type of version bump"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - pre
          - none
        default: pre

jobs:
  build:
    uses: ./.github/workflows/ruby.yml

  push:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: ruby

      - name: Set remote URL
        run: |
          # Attribute commits to the last committer on HEAD
          git config --global user.email "$(git log -1 --pretty=format:'%ae')"
          git config --global user.name "$(git log -1 --pretty=format:'%an')"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          # Verify Git configuration
          git config --global --list

      - name: Bump version
        if: ${{ inputs.bump_type != 'none' }}
        run: |
          # Bump the version using the specified bump type (patch, minor, major, etc.)
          bundle exec bump ${{ inputs.bump_type }} --changelog --no-bundle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get new version
        id: new_version
        run: |
          # Extract the new version from the version.rb file
          NEW_VERSION=$(ruby -e "require 'mvola'; puts MVola::VERSION")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create release branch
        run: |
          # Create and checkout a new release branch based on the new version (release-v<version>)
          git checkout -b release-v${{ env.NEW_VERSION }}
          git add .
          git commit -m "Release version v${{ env.NEW_VERSION }}"
          git push origin release-v${{ env.NEW_VERSION }}

      # Publish to RubyGems
      - name: Release
        uses: cadwallion/publish-rubygems-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}

      # Create Pull Request to merge the release branch into main
      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GIT_ACTION_TOKEN }}  # Token for GitHub Actions to authenticate
          commit-message: "Release version v${{ env.NEW_VERSION }}"  # Commit message for the PR
          committer: "actions-bot <actions-bot@users.noreply.github.com>"  # Set committer name and email
          title: "Release version v${{ env.NEW_VERSION }}"  # PR title
          body: |
            This is an automated pull request to merge the release version v${{ env.NEW_VERSION }} into the main branch.
          branch: "release-v${{ env.NEW_VERSION }}"  # Name of the branch to create the PR from
          base: "main"  # The PR should target the main branch
          draft: false  # Make the PR not a draft
